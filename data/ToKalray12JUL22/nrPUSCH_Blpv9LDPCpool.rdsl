	%***********************************************************************
	% Extern function declarations
	% Definitions of these extern functions will be
	% Platform specific (not part of RDSL)
	%***********************************************************************
        % included is the maximum cycle times of these externs
	% and basic constraints on their runtimes
        extern rate_dematch_cfunc(in1, in2, out1)
        extern ldpc_decoder_pool_cfunc(inrd[][], ininfo[],   outbits[][])
        extern descrambler_cfunc(in1, in2, out)
	extern extract_data_cblk_info_cfunc(in, out) 
        extern soft_bits_data_demux_cfunc(in1, in2, out[])
	extern extract_data_tblk_info_cfunc(in, out)
        extern cbl_concat_tblkcrc_generate_cfunc(in1[], in2, out1)

        %************************************************************************
        %Descrambler modifier
	%(Inverse of Sections 6.3.1.1 Modulation in TS 38.211)
        %************************************************************************
       	modifier descrambler(in soft_bits_per_ue, in scrambling_info_in, out descramble_soft_bits_per_ue)

                    descrambler_cfunc(soft_bits_per_ue, scrambling_info_in,descramble_soft_bits_per_ue)  

	%***********************************************************************
	% Flow implements calling descrabling for all users
	%***********************************************************************
	flow descrambler_ue
	     soft_bits_per_ue:			stream{type = in}
	     scrambling_info_in_per_ue:		stream{type = in}
	     descramble_soft_bits_per_ue:	stream{type = out}

	     descrambler(soft_bits_per_ue, scrambling_info_in_per_ue, descramble_soft_bits_per_ue)

	%***************************************************************************
	% Modifiers for Codeblock segmentation flow
	%***************************************************************************
        modifier extract_cb_segmInfo(in blp_info_per_ue_in, out data_cblk_list_out)
                    extract_data_cblk_info_cfunc(blp_info_per_ue_in, data_cblk_list_out)
        
        modifier do_cb_segmentation(in descramble_soft_bits_per_ue,
                                    in data_cblk_list_in,
                                    out soft_bits_data_cblk[])
                    soft_bits_data_demux_cfunc(descramble_soft_bits_per_ue,
                                               data_cblk_list_in, soft_bits_data_cblk)  
        %***********************************************************************
        %Demultiplexing and Codeblock segmentation
        %************************************************************************
        flow cb_segmentation
             descramble_soft_bits_per_ue_in     :       stream{type = in}
             blp_info_per_ue                    :       stream{type = in}
             soft_bits_data_cblk_out            :       stream[MAX_NUM_CBLK]{type = out}
             data_cblk_list                     :       stream{type = out}

             extract_cb_segmInfo(blp_info_per_ue, data_cblk_list)
             do_cb_segmentation(descramble_soft_bits_per_ue_in, data_cblk_list, soft_bits_data_cblk_out)
                   
        
        %**************************************************************************
        %Modifiers Definitions for ulsch_decode_per_cblk flow
        %**************************************************************************

        %**************************************************************************
        % Rate dematching modifier
        %**************************************************************************
        modifier rate_dematch(in soft_bits_data_cblk_in,
                	in t_rate_info_per_ue,
                	out t_rate_dematch_soft_bits_cblk)

                  rate_dematch_cfunc(soft_bits_data_cblk_in,
		  			t_rate_info_per_ue, t_rate_dematch_soft_bits_cblk)

	%***************************************************************************
	% flow combines all rate dematching
	%***************************************************************************
	flow rate_dematch_cblk(u,c)
	     soft_bits_data_cblk_in:		stream{type = in}
	     blp_info_per_ue:	     		stream{type = in}
	     t_rate_dematch_soft_bits_cblk:	stream{type = out}

	     rate_dematch(soft_bits_data_cblk_in, blp_info_per_ue,
	     		  t_rate_dematch_soft_bits_cblk)

        %***************************************************************************
        % Performing ldpc decoder using pool as if it was a function call
        %***************************************************************************
        modifier ldpc_decoder_pool(in t_rate_dematch_soft_bits_cblk[][],
                		   in t_ldpc_decoder_info[],
                		   out decoded_bits_cblk_out[][])

		ldpc_decoder_pool_cfunc(t_rate_dematch_soft_bits_cblk,
		    	t_ldpc_decoder_info, decoded_bits_cblk_out)


       %*****************************************************************************
       %Uplink Shared Channel Decoding Control flow
       %This flow implements the "control flow" for the inverse operation of the UL-SCH encoding
       % process specified in these sections of TS 38.212:
       %       Sections 6.2.3: Code block segmentation and code block CRC attachment
       %       Sections 6.2.4: Channel coding of UL-SCH
       %       Sections 6.2.5: Rate matching
       %*****************************************************************************

       flow ulsch_decode
       	    soft_bits_data:	stream[MAX_NUM_UL_UEGRPS][MAX_NUM_CBLK]{type = in}
       	    data_cblk_list:		stream[MAX_NUM_UL_UEGRPS]{type = in}
            decoded_bits:	stream[MAX_NUM_UL_UEGRPS][MAX_NUM_CBLK]{type = out}

           %Internal Streams Definitions
           t_rate_dematch_soft_bits_cblk:       stream[MAX_NUM_UL_UEGRPS][MAX_NUM_CBLK]

           % Rate dematching Modifier for a user
	   rate_dematch_cblk{u = 1:MAX_NUM_UL_UEGRPS,
	   		     c = 1:MAX_NUM_CBLK,
			     soft_bits_data_cblk_in = soft_bits_data[u][c],
			     blp_info_per_ue = data_cblk_list[u],
			     t_rate_dematch_soft_bits_cblk = t_rate_dematch_soft_bits_cblk[u][c]}

           % LDPC decoder modifier call
           ldpc_decoder_pool(t_rate_dematch_soft_bits_cblk, data_cblk_list, decoded_bits)

        %*****************************************************************************
        % Modifiers for codeblock concatenation flow
	%*****************************************************************************
	%first extract control info
        modifier extract_cblk_concat_info(in blp_info_per_ue_in,
                                             out data_tblk_info)
                    extract_data_tblk_info_cfunc(blp_info_per_ue_in,data_tblk_info)

	%second combine all code blocks into one T Block out
        modifier do_cbl_concat(in decoded_bits_cblk[],
                                in data_tblk_info,
                                out tblk_out)
                    cbl_concat_tblkcrc_generate_cfunc(decoded_bits_cblk, data_tblk_info, tblk_out)

       %*******************************************************************************
       % Codeblock concatenation modifier to form transport block with crc generation
       %*******************************************************************************
       flow cblk_concat_generateTblk
            decoded_bits_cblk_in               :       stream[MAX_NUM_CBLK]{type = in}
            data_cblk_list                     :       stream{type = in}
       	    tblkout                            :       stream{type = out}

            %Local stream
            data_tblk_info                     :       stream


	    extract_cblk_concat_info(data_cblk_list, data_tblk_info)
            do_cbl_concat(decoded_bits_cblk_in, data_tblk_info, tblkout)

	%******************************************************************************
	%Per UE Bit Level Processing flow
	%This flow implements the "control flow" for the inverse operation of the PUSCH encoding 
	% process specified in these sections of TS 38.211 :
	%	Sections 6.3.1.1 Scrambling 
	%	Sections 6.3.1.2 Modulation
	%******************************************************************************
	
	flow pusch_bit_level_processing
		soft_bits:   			stream[MAX_NUM_UL_UEGRPS]{type = in}
		blp_info:		     	stream[MAX_NUM_UL_UEGRPS]{type = in}
		tblk_out:		    	stream[MAX_NUM_UL_UEGRPS]{type = out}	
		
		%Internal Streams Definitions	
		descramble_soft_bits:		stream[MAX_NUM_UL_UEGRPS]
		soft_bits_data_cblk:  		stream[MAX_NUM_UL_UEGRPS][MAX_NUM_CBLK]
		data_cblk_list:             stream[MAX_NUM_UL_UEGRPS]
		decoded_bits_cblk: 		    stream[MAX_NUM_UL_UEGRPS][MAX_NUM_CBLK]
		
	
		%Descrambler modifier call (Inverse of Sections 6.3.1.1 Modulation in TS 38.211)
                descrambler_ue{u = 1:MAX_NUM_UL_UEGRPS,
				 soft_bits_per_ue = soft_bits[u],
				 scrambling_info_in_per_ue = blp_info[u],
				 descramble_soft_bits_per_ue = descramble_soft_bits[u]}
		
		%Demultiplexing and Codeblock segmentation Flow
                cb_segmentation{u = 1:MAX_NUM_UL_UEGRPS,
				descramble_soft_bits_per_ue_in = descramble_soft_bits[u],
                                blp_info_per_ue = blp_info[u],
                                soft_bits_data_cblk_out = soft_bits_data_cblk[u],
                                data_cblk_list = data_cblk_list[u]}


                 %ulsch decode flow instantiation for maximum number of codeblocks
                 ulsch_decode {soft_bits_data = soft_bits_data_cblk,
			       			  data_cblk_list = data_cblk_list,
			                  decoded_bits = decoded_bits_cblk}
	
		% Codeblock concatenation with crc generation flow
		cblk_concat_generateTblk{u = 1:MAX_NUM_UL_UEGRPS,
					            decoded_bits_cblk_in = decoded_bits_cblk[u],
                                data_cblk_list = data_cblk_list[u],
                                tblkout = tblk_out[u]}

	
	%******************************************************************************
	

